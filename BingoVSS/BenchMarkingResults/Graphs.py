# -*- coding: utf-8 -*-
"""ThesisUCL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10DEAip2v57sWjvxfrKAF_2r74RBaxjLU
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

import seaborn as sns

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

"""**COMPARISON DAS**"""

#read data from a file with path ('filename.csv')
df= pd.read_csv('DasComparisonn.csv')#to view the first 10 rows of the dataset
df.head(10)

# Read the CSV file
data = pd.read_csv('DasComparisonn.csv')

# Set the style
sns.set_style('whitegrid')

# Plot the data
sns.lineplot(x=data['n'], y=data['Das'], marker='o', ms = 10, label='Das et al', color='#FFB6C1')  # Light Pink
sns.lineplot(x=data['n'], y=data['In seconds'], marker='s',ms = 10, label='Bingo' , color='#2596be')  # Navy Blue

max_value = data['n'].max()
ticks = np.arange(0, max_value + 1, 16)  # Generate ticks from 0 to max_value at intervals of 16
plt.xticks(ticks)

# Add titles and labels
plt.title('BLS12-381 Comparison with Das et al.', fontsize=18)
plt.xlabel('n - Number of Participants', fontsize=18)
plt.ylabel('Running Time (s)')
plt.legend()
# Save the figure as an image
plt.savefig('ComparisonWithDas.png', dpi=300, bbox_inches='tight')
# Save the figure as a pdf
plt.savefig('ComparisonWithDas.pdf', dpi=300, bbox_inches='tight')

# Show the plot
plt.show()

"""**KZG COMMITMENTS**"""

#read data from a file with path ('filename.csv')
df= pd.read_csv('KZG.csv')#to view the first 10 rows of the dataset
df.head(10)

# Read the CSV file
data = pd.read_csv('KZG.csv')

# Set the style
sns.set_style('whitegrid')

# Create the initial figure and axis
fig, ax1 = plt.subplots(figsize=(10, 6))

# Plot the 'Setup' data on the primary y-axis (left side)
sns.lineplot(x=data['Degree'], y=data['Setup'], marker='o', ms=10, label='Setup', color='#6432a8', ax=ax1)  # purple

# Create the secondary y-axis (right side)
ax2 = ax1.twinx()
sns.lineplot(x=data['Degree'], y=data['Commit'], marker='s', ms=10, label='Commit', color='#3261a8', ax=ax2)  # Blue

# Set x-axis ticks
max_value = data['Degree'].max()
ticks = np.arange(0, max_value + 20, 10)
ax1.set_xticks(ticks)

# Set y-axis labels and colors
ax1.set_ylabel('Setup Running Time (ms)', color='#6432a8', fontsize=18)
ax2.set_ylabel('Commit Running Time (ms)', color='#3261a8', fontsize=18)
ax1.tick_params(axis='y', colors='#6432a8')
ax2.tick_params(axis='y', colors='#3261a8')

# Add titles and labels
plt.title('Running Time per Functions Commit, Setup', fontsize=18)
ax1.set_xlabel('f - Degree of the Polynomials', fontsize=18)

# Combine legends from both axes
lines, labels = ax1.get_legend_handles_labels()
lines2, labels2 = ax2.get_legend_handles_labels()
ax2.legend(lines + lines2, labels + labels2, loc='upper left')

# Save the figure as an image and PDF
plt.savefig('CommitFunction.png', dpi=300, bbox_inches='tight')
plt.savefig('CommitFunction.pdf', dpi=300, bbox_inches='tight')

# Show the plot
plt.show()

# Read the CSV file
data = pd.read_csv('KZG.csv')

# Set the style
sns.set_style('whitegrid')

# Plot the data
sns.lineplot(x=data['Degree'], y=data['PartialEval'], marker='o', ms=10, label='PartialEval', color='#6432a8')  # purple
sns.lineplot(x=data['Degree'], y=data['Proof'], marker='s', ms=10, label='Proof', color='#3261a8')  # Blue
sns.lineplot(x=data['Degree'], y=data['Verify'], marker='h', ms=10, label='Verify', color='grey')  # Grey

# Set x-axis ticks
max_value = data['Degree'].max()
ticks = np.arange(0, max_value + 20, 10)
plt.xticks(ticks)

# Set y-axis limits based on data range
y_min = min(data['PartialEval'].min(), data['Proof'].min(), data['Verify'].min())
y_max = max(data['PartialEval'].max(), data['Proof'].max(), data['Verify'].max())
plt.ylim([y_min, y_max])

ticks = np.arange(0, y_max +20 , 20)
plt.yticks(ticks)

# Add titles and labels
plt.title('Running Time per Functions PartialEval, Proof, Verify', fontsize=16)
plt.xlabel('f - Degree of the Polynomials', fontsize=16)
plt.ylabel('Running Time (ms)', fontsize=16)
plt.legend()

# Save the figure as an image and a pdf
plt.savefig('PartialEvalProof.png', dpi=300, bbox_inches='tight')
plt.savefig('PartialEvalProof.pdf', dpi=300, bbox_inches='tight')

# Show the plot
plt.show()

# Read the CSV file
data = pd.read_csv('KZG.csv')

# Set the style
sns.set_style('whitegrid')

# Plot the data
sns.lineplot(x=data['Degree'], y=data['Overall Time'], marker='s', ms=10, label='Overall Time', color='#3261a8')  # Blue


# Set x-axis ticks
max_value = data['Degree'].max()
ticks = np.arange(0, max_value + 20, 10)
plt.xticks(ticks)


# Add titles and labels
plt.title('Running Time for All Scheme', fontsize=16)
plt.xlabel('f - Degree of the Polynomials', fontsize=16)
plt.ylabel('Running Time (ms)', fontsize=16)
plt.legend()

# Save the figure as an image and a pdf
plt.savefig('OverallTime.png', dpi=400, bbox_inches='tight')
plt.savefig('OverallTime.pdf', dpi=400, bbox_inches='tight')

# Show the plot
plt.show()

"""**For BINGO ALL**

"""

#read data from a file with path ('filename.csv')
df= pd.read_csv('ForBingoAll.csv')#to view the first 10 rows of the dataset
df.head(10)

"""FIRST GRAPHS FOR BINGO ALL"""

# Read the CSV file
data = pd.read_csv('ForBingoAll.csv')

# Set the style
sns.set_style('whitegrid')

# Plot the data
sns.lineplot(x=data['2f'], y=data['seconds.1'], marker='o', ms=10, label='Honest Case', color='#cf8ccc')  # pinky
sns.lineplot(x=data['2f'], y=data['NotHonest'], marker='s', ms=10, label='Not Honest Case', color='#5bd4c2')  # cyan

# Set x-axis ticks
max_value = data['2f'].max()
ticks = np.arange(0, max_value + 20, 20)
plt.xticks(ticks)

# Set y-axis limits based on data range
y_min = min(data['seconds.1'].min(), data['NotHonest'].min())
y_max = max(data['seconds.1'].max(), data['NotHonest'].max())
plt.ylim([y_min, y_max])

ticks = np.arange(0, y_max +100 , 100)
plt.yticks(ticks)

# Add titles and labels
plt.title('Running Time of Bingo in terms of X', fontsize=16)
plt.xlabel('f - Degree of the Polynomials', fontsize=16)
plt.ylabel('Running Time (s)', fontsize=16)
plt.legend()

# Save the figure as an image and a pdf
plt.savefig('BingoPerF.png', dpi=300, bbox_inches='tight')
plt.savefig('BingoPerF.pdf', dpi=300, bbox_inches='tight')

# Show the plot
plt.show()

# Read the CSV file
data = pd.read_csv('ForBingoAll.csv')

# Set the style
sns.set_style('whitegrid')

# Plot the data
sns.lineplot(x=data['n'], y=data['seconds.1'], marker='o', ms=10, label='Honest Case', color='#cf8ccc')  # pinky
sns.lineplot(x=data['n'], y=data['NotHonest'], marker='s', ms=10, label='Not Honest Case', color='#5bd4c2')  # cyan

# Set x-axis ticks
max_value = data['n'].max()
ticks = np.arange(0, max_value + 20, 20)
plt.xticks(ticks)

# Set y-axis limits based on data range
y_min = min(data['seconds.1'].min(), data['NotHonest'].min())
y_max = max(data['seconds.1'].max(), data['NotHonest'].max())
plt.ylim([y_min, y_max])

ticks = np.arange(0, y_max +100 , 100)
plt.yticks(ticks)

# Add titles and labels
plt.title('Running Time of Bingo per Participant', fontsize=16)
plt.xlabel('n - Number of Participants', fontsize=16)
plt.ylabel('Running Time (s)', fontsize=16)
plt.legend()

# Save the figure as an image and a pdf
plt.savefig('BingoPerPar.png', dpi=300, bbox_inches='tight')
plt.savefig('BingoPerPar.pdf', dpi=300, bbox_inches='tight')

# Show the plot
plt.show()

"""**CURVES**"""

#read data from a file with path ('filename.csv')
df= pd.read_csv('Curves.csv')#to view the first 10 rows of the dataset
df.head(10)

# Read the CSV file
data = pd.read_csv('Curves.csv')

# Set the style
sns.set_style('whitegrid')

# Plot the data
sns.lineplot(x=data['n'], y=data['Bls12381'], marker='o', ms=10, label='Bls12-381', color='#cf8ccc')  # pinky
sns.lineplot(x=data['n'], y=data['Bn256'], marker='s', ms=10, label='Bn256', color='lightblue')  # cyan

# Set x-axis ticks
max_value = data['n'].max()
ticks = np.arange(0, max_value + 3, 3)
plt.xticks(ticks)

# Set y-axis limits based on data range
y_min = min(data['Bls12381'].min(), data['Bn256'].min())
y_max = max(data['Bls12381'].max(), data['Bn256'].max())
plt.ylim([y_min, y_max])

ticks = np.arange(0, y_max +100 , 50)
plt.yticks(ticks)

# Add titles and labels
plt.title('Comparison of Running Time for each Curve \n (Not Honest Dealer)', fontsize=16)
plt.xlabel('n - Number of Participants', fontsize=16)
plt.ylabel('Running Time (s)', fontsize=16)
plt.legend()

# Save the figure as an image and a pdf
plt.savefig('ComparisonCurNot.png', dpi=300, bbox_inches='tight')
plt.savefig('ComparisonCurNot.pdf', dpi=300, bbox_inches='tight')

# Show the plot
plt.show()

# Read the CSV file
data = pd.read_csv('Curves.csv')

# Set the style
sns.set_style('whitegrid')

# Plot the data
sns.lineplot(x=data['n'], y=data['Bls12381H'], marker='o', ms=10, label='Bls12-381', color='#cf8ccc')  # pinky
sns.lineplot(x=data['n'], y=data['bn256H'], marker='s', ms=10, label='Bn256', color='lightblue')  # cyan

# Set x-axis ticks
max_value = data['n'].max()
ticks = np.arange(0, max_value + 3, 3)
plt.xticks(ticks)

# Set y-axis limits based on data range
y_min = min(data['Bls12381H'].min(), data['bn256H'].min())
y_max = max(data['Bls12381H'].max(), data['bn256H'].max())
plt.ylim([y_min, y_max])

ticks = np.arange(0, y_max +100 , 50)
plt.yticks(ticks)

# Add titles and labels
plt.title('Comparison of Running Time for each Curve \n (Honest Dealer)', fontsize=16)
plt.xlabel('n - Number of Participants', fontsize=16)
plt.ylabel('Running Time (s)', fontsize=16)
plt.legend()

# Save the figure as an image and a pdf
plt.savefig('ComparisonCur.png', dpi=300, bbox_inches='tight')
plt.savefig('ComparisonCur.pdf', dpi=300, bbox_inches='tight')

# Show the plot
plt.show()

#read data from a file with path ('filename.csv')
df= pd.read_csv('Operations.csv')#to view the first 10 rows of the dataset
df.head(10)

# Read the CSV file
data = pd.read_csv('Operations.csv')

# Set the style
sns.set_style('whitegrid')

# Plot the data
sns.lineplot(x=data['Unnamed: 0'], y=data['Deal'], marker='o', ms=10, label='BingoDeal', color='#cf8ccc')  # pinky

# Set x-axis ticks
max_value = data['Unnamed: 0'].max()
ticks = np.arange(0, max_value + 5, 5)
plt.xticks(ticks)


# Add titles and labels
plt.title('Bingo Deal Running Time', fontsize=16)
plt.xlabel('f Degree of the Polynomial', fontsize=16)
plt.ylabel('Running Time (s)', fontsize=16)
plt.legend()

# Save the figure as an image and a pdf
plt.savefig('BingoDeal.png', dpi=300, bbox_inches='tight')
plt.savefig('BingoDeal.pdf', dpi=300, bbox_inches='tight')

# Show the plot
plt.show()

# Read the CSV file
data = pd.read_csv('Operations.csv')

# Set the style
sns.set_style('whitegrid')

# Plot the data
sns.lineplot(x=data['Unnamed: 4'], y=data['BingoRec'], marker='o', ms=10, label='BingoReconstruct', color='lightblue')  # pinky

# Set x-axis ticks
max_value = data['Unnamed: 4'].max()
ticks = np.arange(0, max_value + 5, 5)
plt.xticks(ticks)


# Add titles and labels
plt.title('BingoReconstruct Running Time', fontsize=16)
plt.xlabel('m - Number of Secrets', fontsize=16)
plt.ylabel('Running Time (s)', fontsize=16)
plt.legend()

# Save the figure as an image and a pdf
plt.savefig('BingoReco.png', dpi=300, bbox_inches='tight')
plt.savefig('BingoReco.pdf', dpi=300, bbox_inches='tight')

# Show the plot
plt.show()